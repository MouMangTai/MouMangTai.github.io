<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《月下神话》读后感</title>
    <link href="/2021/10/04/%E3%80%8A%E6%9C%88%E4%B8%8B%E7%A5%9E%E8%AF%9D%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <url>/2021/10/04/%E3%80%8A%E6%9C%88%E4%B8%8B%E7%A5%9E%E8%AF%9D%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="《月下神话》读后感"><a href="#《月下神话》读后感" class="headerlink" title="《月下神话》读后感"></a>《月下神话》读后感</h2><p>刚看到书的标题时还以为《月下神话》是一本小说，搜了搜才知道其实是一本已经畅销了几十年的编程书，主要讲述项目内部的人员配置和开发效率之间的关系。其中我对“经验法则”和“外科手术队伍”比较感兴趣，也有一些自己的看法。</p><p>“经验法则”是作者提出的在项目开发过程中的进度安排：1/3计划、1/6编码、1/4构件测试和1/4系统测试。由比例就能看出计划和测试的重要性：计划是整个项目的开头，一个产品真正能够投入市场被用户所接受，就必须要在编码之前了解清楚用户的需要和喜好，进行需求分析，项目设计；而测试则是为了保证产品的质量，让用户有更流畅的体验。所以在我看来一个好的产品在开发过程中就更应该把多的时间放在和用户有关的步骤上面，生产软件是为人服务而不是为了生产本身。当然计划和测试也能帮助到我们程序员的开发，计划让我们的编程更加有条理性和逻辑性，测试能反馈我们bug去更完善产品。虽然计划和测试是如此的重要，但是经过一段实习经历后我发现，在实际的开发过程中编码却总是占着绝大部分的时间。以我个人的经历，大多数的小公司会因为急于项目上线，并不会过多的去细致的规划产品，往往都是一期一期走着看，导致程序员在开发过程中陷入很多无谓的业务修改中，代码反复修改，越改越不容易修改，导致每一次的修改成本都在上升，陷入了业务的沼泽就没时间对代码进行优化或者重构，最终在deadline到来之时草草上线，由于缺少测试，往往都由用户来反馈bug，一个产品的失败也就在所难免了。所以经验法则还是很有参考的必要的。</p><p>“外科手术队伍”说的则是一个项目团队的人员配置，里面着重强调沟通带来的成本，强调概念的一致性和项目的一致性。一个团队不是人越多开发的效率就越高，人多了划分的模块也就多了，模块与模块之间的也就是人与人之间的交互所带来的成本也就高了，而且划分的模块之间往往具有依赖性，并不能完全的独立开发完成。而外科手术团队中外科医生负责任务的划分，避免了由于模块的分解，不同的意见导致的策略上的不一致而带来的讨论和分歧，保证了一个概念的完整性。所以一个合理的人员配置可以用更少的人更少的成本来更高效的产出。</p><p>当然我觉得并不是人多就一定不好，在一定情况下，增加人手也是可以提升或者是追回进度上的滞后，前提要分析进度落后的原因和分析增加人手是否真的能带来进度的提升，而不是面对过多的需求和落后的进度就下意识的去增加人手。</p><p>以上主要是讲述开发过程的时间配置和人员配置，未来如果我成为了一名产品经理，我一定还会重拾这本书好好品味品味。</p>]]></content>
    
    
    <categories>
      
      <category>读后感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程（NIO学习）</title>
    <link href="/2021/10/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88NIO%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
    <url>/2021/10/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88NIO%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="非阻塞，阻塞和多路复用"><a href="#非阻塞，阻塞和多路复用" class="headerlink" title="非阻塞，阻塞和多路复用"></a>非阻塞，阻塞和多路复用</h3><ol><li>阻塞:线程没有监听到指定的操作执行时，就会停止运行。如ServerSocketChannel.accept()和channel.read(buffer)都是阻塞方法。在单线程的情况下，服务端只能执行一轮accpet一个线程并且read客户端传来的数据，但是会阻塞在下一次的accept。所以阻塞方法只能适用在多线程的情况下。但是在多线程的情况下也会有线程太多，频繁上下文切换导致性能降低.</li><li>非阻塞:各个操作之间没有影响，可以监听多个线程的多个操作。问题在于一直循环cpu占用率很高.</li><li>多路复用:单线程情况下通过配合Selector完成对多个channel可读写事件的监控，就是多路复用。<br>Selector保证了有可连接事件时才去连接，有可读事件时才去读取，有可写事件时才去写入.</li></ol><h3 id="Selector（基于事件驱动）（多路复用）"><a href="#Selector（基于事件驱动）（多路复用）" class="headerlink" title="Selector（基于事件驱动）（多路复用）"></a>Selector（基于事件驱动）（多路复用）</h3><h4 id="1-核心代码"><a href="#1-核心代码" class="headerlink" title="1. 核心代码"></a>1. 核心代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws IOException </span>&#123;<br>    <span class="hljs-comment">//1.定义Selector，管理多个channel</span><br>    Selector selector = Selector.<span class="hljs-built_in">open</span>();<br>    <br>    <span class="hljs-comment">//服务端的channel</span><br>    ServerSocketChannel ssc = ServerSocketChannel.<span class="hljs-built_in">open</span>();<br>    ssc.<span class="hljs-built_in">configureBlocking</span>(<span class="hljs-literal">false</span>);<br>    ssc.<span class="hljs-built_in">bind</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">InetSocketAddress</span>(<span class="hljs-number">8282</span>));<br>    <br>    <span class="hljs-comment">//2.将ServerSocketChannel注册到selector下，参数0表示不监听任何事件，通过下一个方法进行监听</span><br>    SelectionKey sscKey = ssc.<span class="hljs-built_in"><span class="hljs-keyword">register</span></span>(selector,<span class="hljs-number">0</span>,null);<br><br>    <span class="hljs-comment">//3.定义SelectionKey的监听事件</span><br>    sscKey.<span class="hljs-built_in">interestOps</span>(SelectionKey.OP_ACCEPT);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">//4.select方法</span><br>        <span class="hljs-comment">//当没有任何事件发生则阻塞，任一事件发生了就继续执行。</span><br>        <span class="hljs-comment">//避免了无效的空转</span><br>        selector.<span class="hljs-built_in">select</span>();<br><br>        <span class="hljs-comment">//5.处理事件,方法返回所有可用的集合事件</span><br>        <span class="hljs-comment">//利用迭代器遍历</span><br>        Iterator&lt;SelectionKey&gt; iterator = selector.<span class="hljs-built_in">selectedKeys</span>().<span class="hljs-built_in">iterator</span>();<br>        <span class="hljs-keyword">while</span>(iterator.<span class="hljs-built_in">hasNext</span>())&#123;<br>            SelectionKey curKey = iterator.<span class="hljs-built_in">next</span>();<br><br>            <span class="hljs-comment">//非常重要，解决空指针异常，当一个selectionKey上的事件都处理完了之后，nio并不会将该selectionKey从集合中除去，下次执行就会爆空指针异常，所以要手动除去。</span><br>            iterator.<span class="hljs-built_in">remove</span>();<br><br>            <span class="hljs-comment">//区分事件类型</span><br>            <span class="hljs-keyword">if</span>(curKey.<span class="hljs-built_in">isAcceptable</span>())&#123;<br>                log.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;连接事件...&quot;</span>);<br><br>                <span class="hljs-comment">//6.通过SelectionKey获取到关联的channel</span><br>                ServerSocketChannel channel = (ServerSocketChannel)curKey.<span class="hljs-built_in">channel</span>();<br>                <br>                <span class="hljs-comment">//执行对应的事件</span><br>                SocketChannel sc = channel.<span class="hljs-built_in">accept</span>();<br>                sc.<span class="hljs-built_in">configureBlocking</span>(<span class="hljs-literal">false</span>);<br><br>                <span class="hljs-comment">//7.将SocketChannel注册到Selector中,并将buffer作为附件关联到SelectionKey,使之能够一一对应,一个channel维护一个独立的buffer,避免多线程情况下buffer中内容混乱。</span><br>                ByteBuffer buffer = ByteBuffer.<span class="hljs-built_in">allocate</span>(<span class="hljs-number">16</span>);<br>                SelectionKey scKey = sc.<span class="hljs-built_in"><span class="hljs-keyword">register</span></span>(selector, <span class="hljs-number">0</span>, buffer);<br>                scKey.<span class="hljs-built_in">interestOps</span>(SelectionKey.OP_READ);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(curKey.<span class="hljs-built_in">isReadable</span>())&#123;<br>                <br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;读取事件...&quot;</span>);<br>                    <br>                    <span class="hljs-comment">//6.通过SelectionKey获取到关联的channel</span><br>                    SocketChannel channel = (SocketChannel)curKey.<span class="hljs-built_in">channel</span>();<br>                    <span class="hljs-comment">//7.获取附件的buffer</span><br>                    ByteBuffer buffer = (ByteBuffer)curKey.<span class="hljs-built_in">attachment</span>();<br>                    <span class="hljs-keyword">int</span> read = channel.<span class="hljs-built_in">read</span>(buffer);<br><br>                    <span class="hljs-comment">//如果客户端正常断开，返回值拿到-1，需要将事件取消</span><br>                    <span class="hljs-keyword">if</span>(read == <span class="hljs-number">-1</span>) &#123;<br>                        curKey.<span class="hljs-built_in">cancel</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br><br>                    <span class="hljs-built_in">split</span>(buffer);<br>                    <span class="hljs-comment">//如果position和limit相同，则说明buffer已经满了</span><br>                    <span class="hljs-keyword">if</span>(buffer.<span class="hljs-built_in">position</span>()==buffer.<span class="hljs-built_in">limit</span>())&#123;<br>                        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;经过一次扩容&quot;</span>);<br>                        ByteBuffer newBuffer = ByteBuffer.<span class="hljs-built_in">allocate</span>(buffer.<span class="hljs-built_in">capacity</span>() * <span class="hljs-number">2</span>);<br>                        buffer.<span class="hljs-built_in">flip</span>();<br>                        newBuffer.<span class="hljs-built_in">put</span>(buffer);<br>                        curKey.<span class="hljs-built_in">attach</span>(newBuffer);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = buffer.<span class="hljs-built_in">position</span>(); j &lt; buffer.<span class="hljs-built_in">limit</span>(); j++) &#123;<br>                            System.out.<span class="hljs-built_in">print</span>((<span class="hljs-keyword">char</span>)buffer.<span class="hljs-built_in">get</span>(j));<br>                        &#125;<br>                        System.out.<span class="hljs-built_in">println</span>();<br>                    &#125;<br><br><br>                &#125; <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (IOException e) &#123;<br>                    <span class="hljs-comment">//如果强制断开，进入异常，需要将事件取消</span><br>                    e.<span class="hljs-built_in">printStackTrace</span>();<br>                    curKey.<span class="hljs-built_in">cancel</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-理解"><a href="#2-理解" class="headerlink" title="2. 理解"></a>2. 理解</h4><ul><li>Selector类似于注册中心，通过selector可以获取到所有的channel。</li><li>Selector模式下有两个集合，分别为channel集合（key为selectionKey，value为channel）和事件集合（key为selectionKey，value为事件队列）。当select()方法监听到事件后，会同时添加两个到两个集合中，而当事件执行完成后，会将事件集合中当前键值对的value去除掉已经执行的事件，但是即使value为空了当前键值对也不会删除，所以每次都需要手动地去迭代器中删除key，来解决空指针异常。</li><li>selector.select()等待的是所有事件（包括未处理事件），所以不会造成一个事件阻塞而导致另外事件无法监听到的问题。问题在于事件必须处理，或者执行cancel方法，否则会一直轮询。</li><li>selector将非阻塞模式改进为无事件阻塞，有事件非阻塞。</li><li>channel通过register注册到selector,注册的同时绑定一个selectionKey,selectionKey通过interestOps监听事件,并且可以通过attach绑定buffer。</li></ul><h4 id="3-处理消息边界"><a href="#3-处理消息边界" class="headerlink" title="3. 处理消息边界"></a>3. 处理消息边界</h4><ul><li>拆包粘包:LTV或者TLV协议传输</li><li>attachment附件:channel注册时绑定对应的buffer，将一个buffer作为附件关联到selectionKey上。</li><li>channel容量不足:扩容然后作为新的附件关联到selectionKey上。</li></ul><h4 id="4-buffer大小分配"><a href="#4-buffer大小分配" class="headerlink" title="4. buffer大小分配"></a>4. buffer大小分配</h4><ol><li>先分配小的buffer，不断两倍扩容。消息连续易于处理，但是需要拷贝耗费性能。</li><li>多个数组组成buffer，一个数组不够就把多的内容写入新的数组。不连续解析复杂，但是避免了拷贝。</li></ol><h4 id="5-Select-何时不阻塞"><a href="#5-Select-何时不阻塞" class="headerlink" title="5. Select()何时不阻塞"></a>5. Select()何时不阻塞</h4><ol><li>客户端发起连接，触发accept</li><li>客户端发数据，客户端正常，异常关闭或者发送的数据大于buffer缓冲区触发1到n次读取事件。</li><li>channel可写，触发1到n次写入事件。</li><li>调用selector的wakeup()和close()方法。<h3 id="ByteBuffer-和-Channel-常用方法"><a href="#ByteBuffer-和-Channel-常用方法" class="headerlink" title="ByteBuffer 和 Channel 常用方法"></a>ByteBuffer 和 Channel 常用方法</h3></li></ol><ul><li>读取<br>从channel读取数据填充ByteBuffer。<br><code>int readBytes = channel.read(buffer)</code></li><li>写入<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ByteBuffer buffer = ...<br>buffer.<span class="hljs-built_in">put</span>(..);<br>buffer.<span class="hljs-built_in">flip</span>();<span class="hljs-comment">//切换读模式</span><br><br><span class="hljs-keyword">while</span>(buffer.<span class="hljs-built_in">hasRemaining</span>()) &#123;<br>    channel.<span class="hljs-built_in">write</span>(buffer);<br>    <span class="hljs-comment">//channel.write(Charset.defaultCharset().encode(&quot;hello&quot;));</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>文件传输<br><code> from.transferTo(position,size,to)</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>nio</tag>
      
      <tag>netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
